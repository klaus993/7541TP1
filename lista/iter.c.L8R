#include "iter.h"
#include "lista.h"

struct lista_iter {
	nodo_t *actual;
};


lista_iter_t *lista_iter_crear(lista_t *lista) {
	lista_iter_t *iter = malloc(sizeof(lista_iter_t));
	if (iter == NULL) {
		return NULL;
	}
	iter->actual = lista->prim;
	return iter;
}

/* Pre: el iterador fue creado */
bool lista_iter_avanzar(lista_iter_t *iter){
	iter->actual = iter->actual->prox;
	return true;
}

void *lista_iter_ver_actual(const lista_iter_t *iter){
	return iter->actual->dato;
}

bool lista_iter_al_final(const lista_iter_t *iter) {
	return iter->actual == NULL;
}

void lista_iter_destruir(lista_iter_t *iter) {
	free(iter);
}

bool lista_iter_insertar(lista_iter_t *iter, void *dato) {
	nodo_t *nodo_nuevo = malloc(sizeof(nodo_t));
	if (nodo_nuevo == NULL) {
		return false;
	}
	nodo_nuevo->dato = dato;
	nodo_nuevo->prox = iter->actual->prox;
	iter->actual->prox = nodo_nuevo;
	return true;
}

void *lista_iter_borrar(lista_iter_t *iter) {
	if (iter->actual->prox == NULL) {
		return NULL;
	}
	void *dato = iter->actual->dato;
	iter->actual->prox = iter->actual->prox->prox;
	return dato;
}
